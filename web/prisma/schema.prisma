// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 開発=================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
 }


// 本番=================================
//generator client {
 // provider = "prisma-client-js"
//}
//datasource db {
//  provider = "postgresql"
//  url      = env("POSTGRES_PRISMA_URL")
//}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//generator client2 {
//  provider = "prisma-client-js"
//}

model items {
  id          Int       @id @default(autoincrement())  
  name        String                                  
  price       Int                         
  description String
  purchases    Purchase[]                        
  category_id Int
  category    category  @relation(fields: [category_id], references: [id])
  image_path01 String?
  image_path02 String?
  image_path03 String?
  image_path04 String?
  maji_flag   Boolean   @default(false)
  postage     Int?
  inventory   Int      @default(0)
  deleted_at  DateTime?                                 
  created_at  DateTime                                  
  updated_at  DateTime                                  
}

model sliders {
  id          Int       @id @default(autoincrement())
  images  Json
  deleted_at  DateTime?                                 
  created_at  DateTime                                  
  updated_at  DateTime  
}

model schedules {
  id          Int       @id @default(autoincrement())   // id (BIGSERIALに相当)
  title        String                                  // 商品名 (textに相当)
  memo        String?                               // 説明 (textに相当)
  start_time  DateTime?                              // 説明 (textに相当)
  end_time    DateTime?                               // 説明 (textに相当)
  schedule_date    DateTime                            // 説明 (textに相当)
  deleted_at  DateTime?                                 // 削除日時 (timestamp with time zoneに相当、NULLを許可)
  created_at  DateTime                                  // 作成日時 (timestamp with time zoneに相当)
  updated_at  DateTime                                  // 更新日時 (timestamp with time zoneに相当)
}

model admin_users {
  id          BigInt      @id @default(autoincrement())   // id (BIGSERIALに相当)
  email       String                                    // E-mail (textに相当)
  password    String                                    // パスワード (textに相当)
  deleted_at  DateTime?                                 // 削除日時 (timestamp with time zoneに相当、NULLを許可)
  created_at  DateTime                                  // 作成日時 (timestamp with time zoneに相当)
  updated_at  DateTime                                  // 更新日時 (timestamp with time zoneに相当)
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  customerId    String?         @unique //stripe連携用
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  country         String?
  city         String?
  state         String?
  postal_code   String?
  line1   String?
  line2   String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model category {
  id          Int      @id @default(autoincrement())  
  name        String
  items       items[]                           
  deleted_at  DateTime?                                 
  created_at  DateTime                                 
  updated_at  DateTime                                  
}

model Purchase {
  id                 String    @id @default(cuid())
  customerId       String
  itemId             Int
  quantity           Int
  support_flag      Boolean   @default(false)
  // ユニーク外しとく
  // @@unique([userId, itemId])

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  item items @relation(fields: [itemId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id             String    @id @default(cuid())
  customerId    String?         @unique //stripe連携用
  name          String?
  email         String?   @unique
  country         String?
  city         String?
  state         String?
  postal_code   String?
  line1   String?
  line2   String?        

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  purchases     Purchase[]
}