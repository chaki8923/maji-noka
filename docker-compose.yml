version: '3'
services:
  db:
    image: postgres
    # dbのユーザー名とパスワードでこれが無いとdbが起動できなかった
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    # 無くても動くけど指定しておくとdocker-composeを停止してもdbの内容が永続化されるため、指定することが多いと思われる
    # https://matsuand.github.io/docs.docker.jp.onthefly/storage/volumes/
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    # 無くても動くが指定しておくとコンテナ停止時にサービスが再起動してくれる
    # https://docs.docker.jp/v19.03/config/container/start-containers-automatically.html
    ports:
      - 5434:5432
    restart: always
  div:
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./div/Dockerfile
    container_name: div
    # tmp/pids/server.pidが残ってたら `A server is already running. ~~` のエラーでrailsを起動できないので事前に消してから、`rails sever` する
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
    # 上記のdbイメージで指定したユーザー名とパスワードをrails側でも指定するため環境変数に設定。
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    # ホストのカレントディレクトリ(.)とイメージ内の/myappディレクトリを同期させている
    volumes:
      - ./div:/div
    ports:
      - "127.0.0.5:3000:3000"
    depends_on:
      - db
  web:
    build:
      context: .
    command: sh -c 'cd web && yarn start'
    container_name: web
    volumes:
      - ./:/usr/src/app
    ports:
      - "127.0.1.1:3000:3000"
  api:
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./api/Dockerfile
    container_name: api
    # tmp/pids/server.pidが残ってたら `A server is already running. ~~` のエラーでrailsを起動できないので事前に消してから、`rails sever` する
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
    # 上記のdbイメージで指定したユーザー名とパスワードをrails側でも指定するため環境変数に設定。
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    # ホストのカレントディレクトリ(.)とイメージ内の/myappディレクトリを同期させている
    volumes:
      - ./api:/api
    ports:
      - "127.0.0.2:3000:3000"
    depends_on:
      - db
  mailcatcher:
    image: schickling/mailcatcher
    container_name: mailcatcher
    ports:
      - '1080:1080'
      - '1025:1025'
volumes:
  postgres_volume: